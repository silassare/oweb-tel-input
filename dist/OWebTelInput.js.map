{"version":3,"file":"OWebTelInput.js","sourceRoot":"","sources":["../src/OWebTelInput.ts"],"names":[],"mappings":"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","sourcesContent":["/**\r\n * OWebTelInput.js 2016-2019\r\n *\r\n * Emile Silas Sare (emile.silas@gmail.com)\r\n *\r\n * Thanks to https://github.com/jackocnr/intl-tel-input/\r\n */\r\nimport './utils.js';\r\nimport { tCountry, cc2ToCountry, dialCodeToCc2, countries } from './countries';\r\n\r\ntype tOptions = {\r\n\tcc2: string;\r\n\t// nationalMode: true,\r\n\tphoneNumber: string;\r\n\tnumberType: 'MOBILE';\r\n\tpreferredCountries: string[];\r\n\tshowSamplePlaceholder: boolean;\r\n\tallowedCountries: () => string[];\r\n};\r\n\r\nconst utils = (window as any).intlTelInputUtils,\r\n\tdefaultOptions: tOptions = {\r\n\t\tcc2: 'bj',\r\n\t\t// nationalMode: false,\r\n\t\tphoneNumber: '',\r\n\t\tnumberType: 'MOBILE',\r\n\t\tpreferredCountries: ['bj'],\r\n\t\tshowSamplePlaceholder: true,\r\n\t\tallowedCountries: () => [],\r\n\t},\r\n\tcleanPhoneString = function (str: string) {\r\n\t\treturn (\r\n\t\t\t'+' +\r\n\t\t\tstr\r\n\t\t\t\t.replace(/[^\\d -]/g, '')\r\n\t\t\t\t.replace(/\\s+/g, ' ')\r\n\t\t\t\t.replace(/-[^\\d]/g, '-')\r\n\t\t\t\t.replace(/^[^1-9]+/g, '')\r\n\t\t);\r\n\t};\r\n\r\nclass OWebTelInput {\r\n\tprivate phoneNumber: string = '';\r\n\tprivate options: tOptions = {} as tOptions;\r\n\tprivate currentCountry: tCountry = {} as tCountry;\r\n\r\n\tconstructor(options: any) {\r\n\t\tthis._updateOptions(options);\r\n\t}\r\n\r\n\tsetPhoneNumber(phoneNumber: string) {\r\n\t\tphoneNumber = cleanPhoneString(phoneNumber);\r\n\r\n\t\tconst dialCode = OWebTelInput.getDialCode(phoneNumber);\r\n\t\tlet formatted;\r\n\r\n\t\tif (dialCode) {\r\n\t\t\tthis.currentCountry =\r\n\t\t\t\tOWebTelInput.getCountryWithDialCode(dialCode) ||\r\n\t\t\t\tthis.currentCountry;\r\n\t\t\tformatted = this._getFormat(phoneNumber);\r\n\r\n\t\t\tthis.phoneNumber = formatted;\r\n\t\t} else {\r\n\t\t\tthis.phoneNumber = phoneNumber;\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tsetCountry(cc2: string) {\r\n\t\tconst cc2Lower = cc2.toLowerCase();\r\n\t\tif (cc2ToCountry[cc2Lower]) {\r\n\t\t\tconst opt = Object.assign({}, this.options);\r\n\t\t\topt.cc2 = cc2Lower;\r\n\t\t\topt.phoneNumber = '+' + cc2ToCountry[cc2Lower].dialCode;\r\n\r\n\t\t\tthis._updateOptions(opt);\r\n\t\t} else {\r\n\t\t\tthrow new Error('Unknown country code: ' + cc2);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate _updateOptions(options: tOptions): this {\r\n\t\tthis.options = Object.assign(\r\n\t\t\t{},\r\n\t\t\tdefaultOptions,\r\n\t\t\toptions || this.options || {},\r\n\t\t);\r\n\t\tthis.currentCountry = OWebTelInput.getCountryWithCc2(this.options.cc2);\r\n\r\n\t\tif (!this.options.phoneNumber) {\r\n\t\t\t// if no phoneNumber initialize to default cc2 dialCode\r\n\t\t\tthis.options.phoneNumber =\r\n\t\t\t\t'+' + cc2ToCountry[this.options.cc2.toLowerCase()].dialCode;\r\n\t\t}\r\n\r\n\t\tthis.setPhoneNumber(this.options.phoneNumber);\r\n\r\n\t\treturn this;\r\n\t}\r\n\r\n\tgetCurrentCountry(): tCountry {\r\n\t\treturn this.currentCountry;\r\n\t}\r\n\r\n\tgetOptions(): tOptions {\r\n\t\treturn this.options;\r\n\t}\r\n\r\n\tisValid(phoneNumber: string = this.phoneNumber): boolean {\r\n\t\treturn utils.isValidNumber(phoneNumber, this.currentCountry.cc2);\r\n\t}\r\n\r\n\tisPossible(phoneNumber: string = this.phoneNumber): boolean {\r\n\t\treturn (\r\n\t\t\tutils.getValidationError(phoneNumber, this.currentCountry.cc2) ===\r\n\t\t\tutils.validationError.IS_POSSIBLE\r\n\t\t);\r\n\t}\r\n\r\n\tisFor(type: string, phoneNumber: string = this.phoneNumber): boolean {\r\n\t\treturn (\r\n\t\t\tutils.getNumberType(phoneNumber, this.currentCountry.cc2) ===\r\n\t\t\tutils.numberType[type]\r\n\t\t);\r\n\t}\r\n\r\n\tgetSample(isNationalMode: boolean = false): string {\r\n\t\tconst numberType = utils.numberType[this.options.numberType];\r\n\r\n\t\treturn utils.getExampleNumber(\r\n\t\t\tthis.currentCountry.cc2,\r\n\t\t\tBoolean(isNationalMode),\r\n\t\t\tnumberType,\r\n\t\t);\r\n\t}\r\n\r\n\tgetInput(format: boolean = false) {\r\n\t\treturn format\r\n\t\t\t? this._getFormat(this.phoneNumber)\r\n\t\t\t: utils.formatNumber(this.phoneNumber, this.currentCountry.cc2);\r\n\t}\r\n\r\n\tstatic isPhoneNumberPossible(\r\n\t\tphoneNumber: string,\r\n\t\tpossible: boolean = false,\r\n\t) {\r\n\t\tconst instance = new OWebTelInput({ phoneNumber });\r\n\r\n\t\tif (possible === true) {\r\n\t\t\treturn instance.isPossible();\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\tinstance.isValid() ||\r\n\t\t\t(instance.isPossible() && instance.isFor('MOBILE'))\r\n\t\t);\r\n\t}\r\n\r\n\tstatic getCountryWithCc2(cc2: string) {\r\n\t\treturn cc2ToCountry[cc2.toLowerCase()];\r\n\t}\r\n\r\n\tstatic getCountryWithDialCode(dialCode: string): tCountry | null {\r\n\t\tlet found = null;\r\n\r\n\t\tif (dialCode) {\r\n\t\t\tconst cc2List = dialCodeToCc2[dialCode];\r\n\r\n\t\t\tfor (let j = 0; j < cc2List.length; j++) {\r\n\t\t\t\tconst first = cc2List[j]; // may be null so we let it and go to the next if exists\r\n\t\t\t\tif (first) {\r\n\t\t\t\t\tfound = OWebTelInput.getCountryWithCc2(first);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn found;\r\n\t}\r\n\r\n\tstatic getCountriesList() {\r\n\t\treturn cc2ToCountry;\r\n\t}\r\n\r\n\tstatic getDialCode(str: string): string {\r\n\t\tconst phoneNumber = String(str),\r\n\t\t\tnumberReg = /[0-9]/;\r\n\t\tlet dialCode = '';\r\n\r\n\t\t// only interested in international numbers (starting with a plus)\r\n\t\tif (phoneNumber.charAt(0) === '+') {\r\n\t\t\tlet numericChars = '';\r\n\t\t\t// iterate over chars\r\n\t\t\tfor (let i = 0; i < phoneNumber.length; i++) {\r\n\t\t\t\tconst c = phoneNumber.charAt(i);\r\n\t\t\t\t// if char is phoneNumber\r\n\t\t\t\tif (numberReg.test(c)) {\r\n\t\t\t\t\tnumericChars += c;\r\n\t\t\t\t\t// if current numericChars make a valid dial code\r\n\t\t\t\t\tif (dialCodeToCc2[numericChars]) {\r\n\t\t\t\t\t\t// store the actual raw string (useful for matching later)\r\n\t\t\t\t\t\tdialCode = numericChars;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// longest dial code is 4 chars\r\n\t\t\t\t\tif (numericChars.length === 4) {\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn dialCode;\r\n\t}\r\n\r\n\tprivate _getFormat(\r\n\t\tphoneNumber: string,\r\n\t\tisNationalMode: boolean = false,\r\n\t): string {\r\n\t\tconst run = phoneNumber && phoneNumber.trim().length > 1;\r\n\t\tif (run) {\r\n\t\t\tconst format =\r\n\t\t\t\tisNationalMode || phoneNumber.charAt(0) !== '+'\r\n\t\t\t\t\t? utils.numberFormat.NATIONAL\r\n\t\t\t\t\t: utils.numberFormat.INTERNATIONAL;\r\n\t\t\tphoneNumber = utils.formatNumber(\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tthis.currentCountry.cc2,\r\n\t\t\t\tformat,\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn phoneNumber;\r\n\t}\r\n}\r\n\r\nexport default OWebTelInput;\r\n"]}