{"version":3,"file":"OWebTelInput.js","sourceRoot":"","sources":["../src/OWebTelInput.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * OWebTelInput.js Since 2016\n *\n * Emile Silas Sare (emile.silas@gmail.com)\n *\n * Thanks to https://github.com/jackocnr/intl-tel-input/\n */\nimport './utils.js';\nimport {OCountry, cc2ToCountry, dialCodeToCc2} from './countries';\n\ntype OOptions = {\n\tcc2: string;\n\t// nationalMode: true,\n\tphoneNumber: string;\n\tnumberType: 'MOBILE';\n\tpreferredCountries: string[];\n\tshowSamplePlaceholder: boolean;\n\tallowedCountries: () => string[];\n};\n\nconst utils                    = (window as any).intlTelInputUtils,\n\t  defaultOptions: OOptions = {\n\t\t  cc2                  : 'bj',\n\t\t  // nationalMode: false,\n\t\t  phoneNumber          : '',\n\t\t  numberType           : 'MOBILE',\n\t\t  preferredCountries   : ['bj'],\n\t\t  showSamplePlaceholder: true,\n\t\t  allowedCountries     : () => [],\n\t  },\n\t  cleanPhoneString         = function (str: string) {\n\t\t  return (\n\t\t\t  '+' +\n\t\t\t  str\n\t\t\t\t  .replace(/[^\\d -]/g, '')\n\t\t\t\t  .replace(/\\s+/g, ' ')\n\t\t\t\t  .replace(/-[^\\d]/g, '-')\n\t\t\t\t  .replace(/^[^1-9]+/g, '')\n\t\t  );\n\t  };\n\nclass OWebTelInput {\n\tprivate phoneNumber      = '';\n\tprivate options: OOptions        = {} as OOptions;\n\tprivate currentCountry: OCountry = {} as OCountry;\n\n\tconstructor(options: any) {\n\t\tthis._updateOptions(options);\n\t}\n\n\tsetPhoneNumber(phoneNumber: string) {\n\t\tphoneNumber = cleanPhoneString(phoneNumber);\n\n\t\tconst dialCode = OWebTelInput.getDialCode(phoneNumber);\n\t\tlet formatted;\n\n\t\tif (dialCode) {\n\t\t\tthis.currentCountry =\n\t\t\t\tOWebTelInput.getCountryWithDialCode(dialCode) ||\n\t\t\t\tthis.currentCountry;\n\t\t\tformatted           = this._getFormat(phoneNumber);\n\n\t\t\tthis.phoneNumber = formatted;\n\t\t} else {\n\t\t\tthis.phoneNumber = phoneNumber;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tsetCountry(cc2: string) {\n\t\tconst cc2Lower = cc2.toLowerCase();\n\t\tif (cc2ToCountry[cc2Lower]) {\n\t\t\tconst opt       = Object.assign({}, this.options);\n\t\t\topt.cc2         = cc2Lower;\n\t\t\topt.phoneNumber = '+' + cc2ToCountry[cc2Lower].dialCode;\n\n\t\t\tthis._updateOptions(opt);\n\t\t} else {\n\t\t\tthrow new Error('Unknown country code: ' + cc2);\n\t\t}\n\t}\n\n\tprivate _updateOptions(options: OOptions): this {\n\t\tthis.options        = Object.assign(\n\t\t\t{},\n\t\t\tdefaultOptions,\n\t\t\toptions || this.options || {},\n\t\t);\n\t\tconst cc2           = this.options.cc2;\n\t\tthis.currentCountry = OWebTelInput.getCountryWithCc2(cc2);\n\n\t\tif (!this.options.phoneNumber && cc2ToCountry[cc2]) {\n\t\t\t// if no phoneNumber initialize to default cc2 dialCode\n\t\t\tthis.options.phoneNumber = '+' + cc2ToCountry[cc2].dialCode;\n\t\t}\n\n\t\tthis.setPhoneNumber(this.options.phoneNumber);\n\n\t\treturn this;\n\t}\n\n\tgetCurrentCountry(): OCountry {\n\t\treturn this.currentCountry;\n\t}\n\n\tgetOptions(): OOptions {\n\t\treturn this.options;\n\t}\n\n\tisValid(phoneNumber: string = this.phoneNumber): boolean {\n\t\treturn utils.isValidNumber(phoneNumber, this.currentCountry.cc2);\n\t}\n\n\tisPossible(phoneNumber: string = this.phoneNumber): boolean {\n\t\treturn (\n\t\t\tutils.getValidationError(phoneNumber, this.currentCountry.cc2) ===\n\t\t\tutils.validationError.IS_POSSIBLE\n\t\t);\n\t}\n\n\tisFor(type: string, phoneNumber: string = this.phoneNumber): boolean {\n\t\treturn (\n\t\t\tutils.getNumberType(phoneNumber, this.currentCountry.cc2) ===\n\t\t\tutils.numberType[type]\n\t\t);\n\t}\n\n\tgetSample(isNationalMode = false): string {\n\t\tconst numberType = utils.numberType[this.options.numberType];\n\n\t\treturn utils.getExampleNumber(\n\t\t\tthis.currentCountry.cc2,\n\t\t\tBoolean(isNationalMode),\n\t\t\tnumberType,\n\t\t);\n\t}\n\n\tgetInput(format = false) {\n\t\treturn format\n\t\t\t   ? this._getFormat(this.phoneNumber)\n\t\t\t   : utils.formatNumber(this.phoneNumber, this.currentCountry.cc2);\n\t}\n\n\tstatic isPhoneNumberPossible(\n\t\tphoneNumber: string,\n\t\tpossible = false,\n\t) {\n\t\tconst instance = new OWebTelInput({phoneNumber});\n\n\t\tif (possible) {\n\t\t\treturn instance.isPossible();\n\t\t}\n\n\t\treturn (\n\t\t\tinstance.isValid() ||\n\t\t\t(instance.isPossible() && instance.isFor('MOBILE'))\n\t\t);\n\t}\n\n\tstatic getCountryWithCc2(cc2: string) {\n\t\treturn cc2ToCountry[cc2.toLowerCase()];\n\t}\n\n\tstatic getCountryWithDialCode(dialCode: string): OCountry | null {\n\t\tlet found = null;\n\n\t\tif (dialCode) {\n\t\t\tconst cc2List = dialCodeToCc2[dialCode];\n\n\t\t\tfor (let j = 0; j < cc2List.length; j++) {\n\t\t\t\tconst first = cc2List[j]; // may be null so we let it and go to the next if exists\n\t\t\t\tif (first) {\n\t\t\t\t\tfound = OWebTelInput.getCountryWithCc2(first);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn found;\n\t}\n\n\tstatic getCountriesList() {\n\t\treturn cc2ToCountry;\n\t}\n\n\tstatic getDialCode(str: string): string {\n\t\tconst phoneNumber = String(str),\n\t\t\t  numberReg   = /[0-9]/;\n\t\tlet dialCode      = '';\n\n\t\t// only interested in international numbers (starting with a plus)\n\t\tif (phoneNumber.charAt(0) === '+') {\n\t\t\tlet numericChars = '';\n\t\t\t// iterate over chars\n\t\t\tfor (let i = 0; i < phoneNumber.length; i++) {\n\t\t\t\tconst c = phoneNumber.charAt(i);\n\t\t\t\t// if char is phoneNumber\n\t\t\t\tif (numberReg.test(c)) {\n\t\t\t\t\tnumericChars += c;\n\t\t\t\t\t// if current numericChars make a valid dial code\n\t\t\t\t\tif (dialCodeToCc2[numericChars]) {\n\t\t\t\t\t\t// store the actual raw string (useful for matching later)\n\t\t\t\t\t\tdialCode = numericChars;\n\t\t\t\t\t}\n\t\t\t\t\t// longest dial code is 4 chars\n\t\t\t\t\tif (numericChars.length === 4) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dialCode;\n\t}\n\n\tprivate _getFormat(\n\t\tphoneNumber: string,\n\t\tisNationalMode = false,\n\t): string {\n\t\tconst run = phoneNumber && phoneNumber.trim().length > 1;\n\t\tif (run) {\n\t\t\tconst format =\n\t\t\t\t\t  isNationalMode || phoneNumber.charAt(0) !== '+'\n\t\t\t\t\t  ? utils.numberFormat.NATIONAL\n\t\t\t\t\t  : utils.numberFormat.INTERNATIONAL;\n\t\t\tphoneNumber  = utils.formatNumber(\n\t\t\t\tphoneNumber,\n\t\t\t\tthis.currentCountry.cc2,\n\t\t\t\tformat,\n\t\t\t);\n\t\t}\n\n\t\treturn phoneNumber;\n\t}\n}\n\nexport default OWebTelInput;\n"]}